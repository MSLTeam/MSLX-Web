name: Build MSLX Dev

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: macos-latest
    name: 多平台构建
    strategy:
      matrix:
        include:
          # Linux
          - { os: linux, arch: x64, runtime: linux-x64, build_type: normal }
          - { os: linux, arch: x64, runtime: linux-x64, build_type: single }
          - { os: linux, arch: arm64, runtime: linux-arm64, build_type: normal }
          - { os: linux, arch: arm64, runtime: linux-arm64, build_type: single }
          
          # Windows
          - { os: windows, arch: x64, runtime: win-x64, build_type: normal }
          - { os: windows, arch: x64, runtime: win-x64, build_type: single }
          - { os: windows, arch: arm64, runtime: win-arm64, build_type: normal }
          - { os: windows, arch: arm64, runtime: win-arm64, build_type: single }
          
          # macOS
          - { os: osx, arch: arm64, runtime: osx-arm64, build_type: normal }
          - { os: osx, arch: arm64, runtime: osx-x64, build_type: single }
          - { os: osx, arch: arm64, runtime: osx-arm64, build_type: app }
          - { os: osx, arch: x64, runtime: osx-x64, build_type: normal }
          - { os: osx, arch: x64, runtime: osx-x64, build_type: single }
          - { os: osx, arch: x64, runtime: osx-x64, build_type: app }

    steps:
      - name: 签出代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置.NET环境
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: 构建核心类库
        run: dotnet build -c Release -p:TargetFramework=net9.0 ./MSLX.Core/MSLX.Core.csproj

      - name: 执行发布流程
        run: |
          output_dir="./publish/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}/"
          
          # macOS应用特殊处理
          if [[ "${{ matrix.os }}" == "osx" && "${{ matrix.build_type }}" == "app" ]]; then
            dotnet restore -r ${{ matrix.runtime }}
            dotnet msbuild -t:BundleApp \
              -p:RuntimeIdentifier=${{ matrix.runtime }} \
              -property:Configuration=Release \
              -p:UseAppHost=true \
              -p:TargetFramework=net9.0 \
              -p:SelfContained=true \
              -p:PublishSingleFile=true \
              -p:OutputPath="$output_dir" \
              ./MSLX.Desktop/MSLX.Desktop.csproj
          else
            # 通用发布参数
            single_file_flag=""
            [[ "${{ matrix.build_type }}" == "single" ]] && single_file_flag="-p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true"
            
            dotnet publish -c Release \
              -r ${{ matrix.runtime }} \
              --self-contained \
              $single_file_flag \
              -o "$output_dir" \
              ./MSLX.Desktop/MSLX.Desktop.csproj
          fi

      - name: 清理(OSX APP)publish目录
        if: matrix.build_type == 'app'
        run: |
          # 仅保留.app包
          cd ./MSLX.Desktop/publish/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}/publish
          find . -mindepth 1 -maxdepth 1 ! -name "MSLX.app" -exec rm -rf {} \;
          find . -type d -empty -delete

      - name: 上传构建结果
        if: matrix.build_type != 'app'
        uses: actions/upload-artifact@v4
        with:
          name: MSLX-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}
          path: |
            ./publish/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}
            !**/*.pdb
            !**/*.xml
            !**/*.json
            !**/*.icns

      - name: 上传构建结果(OSX App)
        if: matrix.build_type == 'app'
        uses: actions/upload-artifact@v4
        with:
          name: MSLX-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}
          path: |
            ./MSLX.Desktop/publish/${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}/publish
            !**/*.pdb
            !**/*.xml
            !**/*.json

  upload_and_dist:
    needs: build
    runs-on: ubuntu-latest
    name: 发布版本
    steps:
      - name: 下载所有构件
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: MSLX-*
          merge-multiple: false

      - name: 处理压缩文件
        run: |
          mkdir -p dist
          chmod -R +x .
          for dir in artifacts/*/; do
            platform=$(basename $dir | cut -d'-' -f2)
            build_type=$(basename $dir | cut -d'-' -f4)
            
            case "$platform" in
              linux|osx)
                tar --owner=0 --group=0 --mode='a+rwX' -czvf "dist/$(basename $dir).tar.gz" -C "$dir" .
                ;;
              windows)
                zip -r "dist/$(basename $dir).zip" "$dir"
                ;;
            esac
          done

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          draft: false
          prerelease: true
          update: true
          token: ${{ secrets.GITHUB_TOKEN }}
          name: MSLX Build-${{ github.run_number }}
          tag_name: v${{ github.run_number }}-preview
